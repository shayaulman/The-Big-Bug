{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/components/Switch.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Switch from './components/Switch.svelte'\n\n\tconst initBugs = [true, false, true, true, false];\t // true = there is a bug...\n\tlet bugs = [...initBugs], solved, clickCounter = 0;\n\tlet bugChance = 0.35;\n\n\tconst updateChance = () => bugChance = +document.querySelector('.chance').value / 100;\n\n\tconst debug = (index) => {\n\t\tbugs[index] = !bugs[index]; // <- this was the solution! (because we can't use \"bind\" we need to manually update the state...)\n\t\tif (bugs[index] === true) { return }   // was \"bugged\" by user\n\t\tbugs = bugs.map((bug, i) => bug === false ? bugChance > Math.random() && index !== i : true);\n\t\tsolved = !bugs.includes(true);\n\t\tclickCounter++;\t\n\t}\n\n\tconst addBug = () => bugs = [...bugs, Math.random() > 0.5 ? true : false];\n\tconst deleteBug = (last) => bugs.length == 2 ? alert(\"Minimum...\") :\n\t\tbugs = bugs.filter((bug, i) => i !== last);\n\n\tconst newGame = () => {\n\t\tsolved = !solved, clickCounter = 0, bugs = [...initBugs];\n\t}\n</script>\n\n<div class=\"container\">\n\t<h1 class=\"m-3 heading\" style=\"color: indigo\">Try to debug...</h1>\n\t<p class=\"alert alert-info text-center\">On each \"debugging\", there is a\n\t\t<span class=\"chance-input badge badge-light\">\n\t\t\t<input class=\"chance bg-light\" type=\"number\" value=\"35\" min=\"1\" max=\"100\" step=\"1\" on:change={ updateChance } autofocus>\n\t\t</span> % chance for each one of the <strong>green</strong> sliders to get buggy (red)...\n\t</p>\t\t\n\t{#if !solved }\n\t\t<div class=\"justify-content-center align-items-center m-2\">\n\t\t\t<button class=\"btn btn-outline-warning\" on:click={ addBug }>+</button>\n\t\t\t<button class=\"btn btn-outline-warning\" on:click={ () => deleteBug(bugs.length-1) }>-</button>\n\t\t</div>\n\t\t<div class=\"bugs bg-light flex-column justify-content-between\">\n\t\t\t{#each bugs as bug, i}\n\t\t\t\t<Switch isChecked={bug} on:switched={() => debug(i)} />\n\t\t\t{/each}\n\t\t</div>\n\t{:else}\n\t\t<h1 text-success>Hooray ðŸŽ‰</h1>\n\t\t<button class=\"btn btn-success\" on:click={ () => newGame() }>Play Again!</button>\n\t{/if}\n\t<p class=\"m-2\"> Times Clicked: <span class=\"badge badge-danger\">{ clickCounter }</span></p>\n\t<p>Chance: <span class=\"m-2 badge badge-warning\">{ (bugChance * 100).toFixed(0) } %</span></p>\n\t<p class=\"alert\">See <a href=\"https://github.com/shayaulman/The-Big-Bug\" target=\"_blank\">the code</a>...</p>\n</div>\n\t\n<style>\n.container {\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tflex-direction: column;\n}\n\ninput {\n\twidth: 42px;\n\theight: 18px;\n\toutline: none;\n\tborder: none;\n}\n\n\n</style>",
    "<script>\n    import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();\n    export let isChecked;\n</script>\n\n<div class=\"bug d-flex justify-content-between p-2\">\n  <label class=\"switch m-2\">\n    <input type=\"checkbox\" on:change={ () => dispatch('switched') } checked={ isChecked } />\n    <span class=\"slider round\" />\n  </label>\n  <h4 class=\"text-secondary m-2\">Bug #{Math.round(Math.random() * 999)}</h4>\n</div>\n\n<style>\n  .bug {\n    border: 1px solid white;\n    width: 420px;\n  }\n\n  /* source: https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_switch */\n  /* The switch - the box around the slider */\n  .switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n  } /*HidedefaultHTMLcheckbox*/\n  .switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  } /*Theslider*/\n  .slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: lightgreen;\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n  }\n  .slider:before {\n    position: absolute;\n    content: \"\";\n    height: 26px;\n    width: 26px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n  }\n  input:checked + .slider {\n    background-color: rgb(250, 65, 127);\n  }\n  input:focus + .slider {\n    box-shadow: 001pxlightgreen;\n  }\n  input:checked + .slider:before {\n    -webkit-transform: translateX(26px);\n    -ms-transform: translateX(26px);\n    transform: translateX(26px);\n  } /*Roundedsliders*/\n  .slider.round {\n    border-radius: 34px;\n  }\n  .slider.round:before {\n    border-radius: 50%;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqDA,UAAU,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,MAAM,AACvB,CAAC,AAED,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,AACb,CAAC;AClDC,IAAI,cAAC,CAAC,AACJ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,KAAK,CAAE,KAAK,AACd,CAAC,AAID,OAAO,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AACD,qBAAO,CAAC,KAAK,cAAC,CAAC,AACb,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,AACX,CAAC,AACD,OAAO,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,gBAAgB,CAAE,UAAU,CAC5B,kBAAkB,CAAE,IAAI,CACxB,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,qBAAO,OAAO,AAAC,CAAC,AACd,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,CACX,gBAAgB,CAAE,KAAK,CACvB,kBAAkB,CAAE,IAAI,CACxB,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,KAAK,QAAQ,CAAG,OAAO,cAAC,CAAC,AACvB,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AACrC,CAAC,AACD,KAAK,MAAM,CAAG,OAAO,cAAC,CAAC,AACrB,UAAU,CAAE,eAAe,AAC7B,CAAC,AACD,KAAK,QAAQ,CAAG,qBAAO,OAAO,AAAC,CAAC,AAC9B,iBAAiB,CAAE,WAAW,IAAI,CAAC,CACnC,aAAa,CAAE,WAAW,IAAI,CAAC,CAC/B,SAAS,CAAE,WAAW,IAAI,CAAC,AAC7B,CAAC,AACD,OAAO,MAAM,cAAC,CAAC,AACb,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,OAAO,oBAAM,OAAO,AAAC,CAAC,AACpB,aAAa,CAAE,GAAG,AACpB,CAAC"
}